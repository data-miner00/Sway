namespace Sway.Database.Seeder.Writers;

using Sway.Common;
using Sway.Core.Models;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using SpNames = Sway.Common.StoredProcedureNames;

internal sealed class UserSeedSqlWriter : ISqlWriter<User>
{
    private const string DefaultSqlFileName = "script.sql";

    private readonly string basePath;
    private readonly string namingStrategy;

    public UserSeedSqlWriter(string basePath, string namingStrategy)
    {
        this.basePath = Guard.ThrowIfNullOrWhitespace(basePath);
        this.namingStrategy = Guard.ThrowIfNullOrWhitespace(namingStrategy);
    }

    public Task BulkWriteAsync(IEnumerable<User> entities, CancellationToken cancellationToken)
    {
        var sb = new StringBuilder();

        sb.AppendLine(@"-- ------------------------------------------------------------------------------");
        sb.AppendLine(@"-- <auto-generated>");
        sb.AppendLine(@$"-- This is the seeder file for {nameof(User)}.");
        sb.AppendLine(@$"-- Generated on {DateTime.Now.ToShortDateString()}.");
        sb.AppendLine(@"-- </auto-generated>");
        sb.AppendLine(@"-- ------------------------------------------------------------------------------");
        sb.AppendLine();

        sb.AppendLine(@"USE [Sway];");
        sb.AppendLine();
        sb.AppendLine();

        foreach (var user in entities)
        {
            var birthdayString = user.DateOfBirth.ToString("yyyy-MM-dd");

            sb.AppendLine(@$"EXEC {SpNames.CreateNewUser}");
            sb.AppendLine($"    @Username = '{user.Username}',");
            sb.AppendLine($"    @FirstName = '{user.FirstName}',");
            sb.AppendLine($"    @LastName = '{user.LastName}',");
            sb.AppendLine($"    @DateOfBirth = '{birthdayString}',");
            sb.AppendLine($"    @Email = '{user.Email}',");
            sb.AppendLine($"    @Phone = '{user.Phone}',");
            sb.AppendLine($"    @PhotoUrl = '{user.PhotoUrl}',");
            sb.AppendLine($"    @Description = '{user.Description}',");
            sb.AppendLine($"    @PasswordHash = 'TemporaryHash',");
            sb.AppendLine($"    @PasswordSalt = 'TemporarySalt',");
            sb.AppendLine($"    @HashAlgorithm = 'sha256';");

            sb.AppendLine();
        }

        var scriptContent = sb.ToString();

        Directory.CreateDirectory(this.basePath);

        var fullFilePath = this.ConstructFullFilePath();

        return File.WriteAllTextAsync(fullFilePath, scriptContent, cancellationToken);
    }

    private string ConstructFullFilePath()
    {
        var fileName = this.namingStrategy switch
        {
            "Timestamp" => string.Concat(DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss"), ".sql"),
            _ => DefaultSqlFileName,
        };

        return Path.Join(this.basePath, fileName);
    }
}
