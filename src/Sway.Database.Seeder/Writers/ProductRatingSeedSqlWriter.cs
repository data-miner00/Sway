namespace Sway.Database.Seeder.Writers;

using Sway.Common;
using Sway.Core.Models;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using SpNames = Sway.Common.StoredProcedureNames;

internal sealed class ProductRatingSeedSqlWriter : ISqlWriter<ProductRating>
{
    private readonly SqlFileNameBuilder fileNameBuilder;

    public ProductRatingSeedSqlWriter(SqlFileNameBuilder fileNameBuilder)
    {
        this.fileNameBuilder = Guard.ThrowIfNull(fileNameBuilder);
    }

    public Task BulkWriteAsync(IEnumerable<ProductRating> entities, CancellationToken cancellationToken)
    {
        var sb = new StringBuilder();

        sb.AppendLine(@"-- ------------------------------------------------------------------------------");
        sb.AppendLine(@"-- <auto-generated>");
        sb.AppendLine(@$"-- This is the seeder file for {nameof(ProductRating)}.");
        sb.AppendLine(@$"-- Generated on {DateTime.Now.ToShortDateString()}.");
        sb.AppendLine(@"-- </auto-generated>");
        sb.AppendLine(@"-- ------------------------------------------------------------------------------");
        sb.AppendLine();

        sb.AppendLine(@"USE [Sway];");
        sb.AppendLine();
        sb.AppendLine();

        foreach (var entity in entities)
        {
            sb.AppendLine(@$"EXEC [dbo].[{SpNames.AddProductRating}]");
            sb.AppendLine($"    @ProductId = '{entity.ProductId}',");
            sb.AppendLine($"    @AuthorId = '{entity.AuthorId}',");
            sb.AppendLine($"    @Rating = {entity.Rating},");
            sb.AppendLine($"    @Comment = '{entity.Comment}';");

            sb.AppendLine();
        }

        var scriptContent = sb.ToString();

        var fullFilePath = this.fileNameBuilder.Build();

        return File.WriteAllTextAsync(fullFilePath, scriptContent, cancellationToken);
    }
}
