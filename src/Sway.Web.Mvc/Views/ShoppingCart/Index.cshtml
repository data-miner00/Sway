@using Sway.Web.Mvc.Models
@using Sway.Common
@model ShoppingCartViewModel
@{
    ViewData["Title"] = "My shopping cart";
    var itemsCount = Model.CartItems.Count();
    var currentSubtotal = Model.CartItems.Where(x => x.IsSelected).Sum(x => x.UnitPrice * x.Quantity);
}

<div id="notification-container" class="bg-green-300"></div>

<div class="overflow-x-auto">
    <table class="table">
        <thead>
            <tr>
                <th>
                    <label>
                        <input type="checkbox" class="checkbox" />
                    </label>
                </th>
                <th>Product</th>
                <th>Tags</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.CartItems)
            {
                <tr id="@("container-" + item.Id.ToString())">
                    <th>
                        <label>
                            <input
                                type="checkbox"
                                class="checkbox"
                                onchange="return includeOrExcludeItemToCheckout('@item.Id.ToString()', event.target.checked)"
                                checked="@item.IsSelected"
                            />
                        </label>
                    </th>
                    <td>
                        <p>@item.ProductName</p>
                    </td>
                    <td>
                        <div class="badge">default</div>
                        <div class="badge badge-neutral">neutral</div>
                        <div class="badge badge-primary">primary</div>
                    </td>
                    <td>
                        RM@(item.UnitPrice.ToMoney())
                    </td>
                    <td>
                        <div class="flex gap-2">
                            <button class="btn btn-outline btn-xs" onclick="return decrementQuantity('@item.Id.ToString()')">-</button>
                            <div id="@("quantity-" + item.Id.ToString())">@item.Quantity</div>
                            <button class="btn btn-outline btn-xs" onclick="return incrementQuantity('@item.Id.ToString()')">+</button>
                        </div>
                    </td>
                    <td>
                        RM@((item.UnitPrice * item.Quantity).ToMoney())
                    </td>
                    <td>
                        <form action="javascript:softDeleteCartItem('@item.Id.ToString()')">
                            <button type="submit" class="btn btn-ghost" onclick="return confirm('Are you sure?')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="flex justify-between max-w-screen p-4 border border-solid border-gray-100">
        <div>
            <p>@itemsCount Items</p>
            <p class="text-orange-600 font-bold text-3xl">RM@(currentSubtotal.ToMoney())</p>
        </div>
        <div>
            <a class="btn btn-primary" asp-action="Index" asp-controller="Checkout">
                Checkout
            </a>
        </div>
    </div>
</div>

@* <p>My shopping cart Id: @Model.Id</p> *@
@* <p>Last updated at: @Model.ModifiedAt</p> *@

@section Scripts {
    @{await Html.RenderPartialAsync("_LibraryScriptsPartial");}

    <script type="text/javascript">
        function updateUiQuantity(cartItemId, isIncrement) {
            var currentUiCount = $(`#quantity-${cartItemId}`).text();
            var currentUiCountNumber = Number(currentUiCount);
            var newUiCount = isIncrement ? ++currentUiCountNumber : --currentUiCountNumber;
            $(`#quantity-${cartItemId}`).text(newUiCount);
        }

        function removeCartItemFromUi(cartItemId) {
            var cartItemContainer = $(`#container-${cartItemId}`);
            if (cartItemContainer) {
                cartItemContainer.hide();
            }
        }

        function showHiddenCartItemInUi(cartItemId) {
            var cartItemContainer = $(`#container-${cartItemId}`);
            if (cartItemContainer) {
                cartItemContainer.show();
            }
        }

        function displayRemovedNotificationWithUndo(cartItemId, cartItemName) {
            var notificationContainer = $("#notification-container");

            var newMessageNode = document.createElement("div");
            newMessageNode.innerHTML = `Removed ${cartItemName} from shopping cart.`;

            var undoButton = document.createElement("button");
            undoButton.innerText = "Undo";
            undoButton.className = "btn btn-ghost";
            undoButton.onclick = () => {
                undoDeletedCartItem(cartItemId);
                notificationContainer.empty();
            }

            notificationContainer.append(newMessageNode).append(undoButton);
        }

        function incrementQuantity(cartItemId) {
            fetch(`/ShoppingCart/IncrementCartItem/${cartItemId}`, { method: "POST" })
                .then(() => updateUiQuantity(cartItemId, true))
                .catch(console.error);
        }

        function decrementQuantity(cartItemId) {
            fetch(`/ShoppingCart/DecrementCartItem/${cartItemId}`, { method: "POST" })
                .then(() => updateUiQuantity(cartItemId, false))
                .catch(console.error);
        }

        function softDeleteCartItem(cartItemId) {
            fetch(`/ShoppingCart/Delete/${cartItemId}`, { method: "POST" })
                .then(() => {
                    removeCartItemFromUi(cartItemId);
                    displayRemovedNotificationWithUndo(cartItemId, "Cart Item #1");
                })
                .catch(console.error);
        }

        function undoDeletedCartItem(cartItemId) {
            fetch(`/ShoppingCart/Undo/${cartItemId}`, { method: "POST" })
                .then(() => showHiddenCartItemInUi(cartItemId))
                .catch(console.error);
        }

        function includeOrExcludeItemToCheckout(cartItemId, checked) {
            if (checked) {
                fetch(`/ShoppingCart/Select/${cartItemId}`, { method: "POST" })
                    .then(() => console.log('ha'))
                    .catch(console.error);
            } else {
                fetch(`/ShoppingCart/Deselect/${cartItemId}`, { method: "POST" })
                    .then(() => console.log('ha'))
                    .catch(console.error);
            }
        }
    </script>
}
